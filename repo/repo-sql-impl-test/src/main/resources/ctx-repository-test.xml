<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2010-2021 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
        default-lazy-init="true">

    <!-- This @Configuration drives component-scan + can use @Conditional... -->
    <bean id="sqlRepositoryBeanConfig" class="com.evolveum.midpoint.repo.sql.SqlRepositoryBeanConfig"/>

    <!--
    TODO: what about TestSqlRepositoryBeanConfig which would be analog of the above + have
    all the beans below.
    -->
    <bean id="testInterceptor"
            class="com.evolveum.midpoint.repo.sql.testing.TestInterceptor"/>

    <bean id="testSqlRepositoryBeanPostProcessor"
            class="com.evolveum.midpoint.repo.sql.testing.TestSqlRepositoryBeanPostProcessor"/>

    <bean id="testDataSourceFactory"
            class="com.evolveum.midpoint.repo.sqlbase.DataSourceFactory"
            depends-on="sqlEmbeddedRepository">
        <constructor-arg ref="sqlRepositoryConfiguration"/>
    </bean>

    <bean id="testDataSource"
            factory-bean="testDataSourceFactory"
            factory-method="createDataSource"/>

    <!-- Proxied data source used to collect SQL statements -->

    <bean id="proxiedTestDataSource"
            class="net.ttddyy.dsproxy.support.ProxyDataSource"
            primary="true">
        <property name="dataSource" ref="testDataSource"/>
        <property name="proxyConfig" ref="proxyConfig"/>
    </bean>

    <bean id="proxyConfig"
            factory-bean="proxyConfigSupport"
            factory-method="create"/>

    <bean id="proxyConfigSupport" class="net.ttddyy.dsproxy.support.ProxyConfigSpringXmlSupport">
        <property name="dataSourceName" value="my-ds"/>
        <!-- this is bound to be ChainListener (unfortunately) -->
        <property name="queryListener" ref="queryChainListener"/>
    </bean>

    <bean id="queryChainListener" class="net.ttddyy.dsproxy.listener.ChainListener">
        <property name="listeners">
            <list>
                <ref bean="testQueryListener"/>
            </list>
        </property>
    </bean>

    <!-- See TODO in TestSqlRepositoryConfigurationFactory about how this can go away. -->
    <bean id="testSqlRepositoryConfigurationFactory"
            class="com.evolveum.midpoint.repo.sql.testing.TestSqlRepositoryConfigurationFactory">
        <constructor-arg ref="midpointConfiguration"/>
    </bean>

    <bean id="sqlRepositoryConfiguration"
            factory-bean="testSqlRepositoryConfigurationFactory"
            factory-method="createSqlRepositoryConfiguration"/>

    <!-- Hibernate session factory -->
    <bean id="testSessionFactory"
            class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
            lazy-init="true">

        <property name="dataSource" ref="proxiedTestDataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">#{sqlRepositoryConfiguration.hibernateDialect}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">#{sqlRepositoryConfiguration.hibernateHbm2ddl}</prop>
                <prop key="hibernate.id.new_generator_mappings">true</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <prop key="hibernate.transaction.coordinator_class">jdbc</prop>
                <prop key="hibernate.hql.bulk_id_strategy">org.hibernate.hql.spi.id.inline.InlineIdsOrClauseBulkIdStrategy</prop>
                <prop key="hibernate.session_factory.statement_inspector">com.evolveum.midpoint.repo.sql.testing.TestStatementInspector</prop>
            </props>
        </property>
        <property name="implicitNamingStrategy">
            <bean class="com.evolveum.midpoint.repo.sql.util.MidPointImplicitNamingStrategy"/>
        </property>
        <property name="physicalNamingStrategy">
            <bean class="com.evolveum.midpoint.repo.sql.util.MidPointPhysicalNamingStrategy"/>
        </property>
        <property name="annotatedPackages">
            <list>
                <value>com.evolveum.midpoint.repo.sql.type</value>
            </list>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.evolveum.midpoint.repo.sql.data.common</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.any</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.container</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.embedded</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.enums</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.id</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.other</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.type</value>
                <value>com.evolveum.midpoint.repo.sql.data.audit</value>
            </list>
        </property>
        <property name="entityInterceptor" ref="testInterceptor"/>
    </bean>

    <alias name="testSessionFactory" alias="sessionFactory"/>
</beans>
