<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2010-2023 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->
<report xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
        xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
        xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
        oid="7f1695f2-d826-4d78-a046-b8249b79d2b5">
    <name>Indirect assignment report</name>
    <description>Shows information stored in roleMembershipRef value metadata.</description>
    <!--
    Serious test would have this archetype, but it's not available for test.
    <assignment>
        <targetRef oid="00000000-0000-0000-0000-000000000171" type="ArchetypeType"/>
    </assignment>
    -->
    <objectCollection>
        <collection>
            <!-- Type is declared in the view element. -->
            <filter>
                <q:text>. ownedBy (@type = UserType and @path = roleMembershipRef
                    /*and name = 'user-v1'*/)
                </q:text>
            </filter>
        </collection>
        <subreport>
            <name>data</name>
            <order>1</order>
            <asRow>true</asRow>
            <expression>
                <script>
                    <objectVariableMode>prismReference</objectVariableMode>
                    <code>
                        def values = object?.valueMetadata?.realValues?.findAll {
                            m -> m.provenance.assignmentPath != null
                        }?.collect { m ->
                            def assignmentPath = m.provenance.assignmentPath
                            def directAssignmentId = assignmentPath.segment[0].assignmentId
                            def owner = midpoint.resolveReferenceIfExists(m.provenance.assignmentPath.sourceRef)
                            def directAssignment = null
                            if (owner != null) {
                                for (def assignment : owner.assignment) {
                                    if (assignment?.id == directAssignmentId) {
                                        directAssignment = assignment
                                        break
                                    }
                                }
                            }

                            // we'll return object/hashmap for each assignment path metadata value
                            return [
                                    assignmentPath: m.provenance.assignmentPath,
                                    createTimestamp: m.storage?.createTimestamp,
                                    owner: owner,
                                    assignment: directAssignment
                            ]
                        }
                        return values
                    </code>
                </script>
            </expression>
        </subreport>
        <view>
            <type>c:ObjectReferenceType</type>
            <paging>
                <q:orderBy>../name</q:orderBy>
            </paging>
            <column>
                <name>user</name>
                <display>
                    <label>User</label>
                </display>
                <export>
                    <expression>
                        <script>
                            <objectVariableMode>prismReference</objectVariableMode>
                            <code>
                                return !data.owner ? 'Unknown owner' : data.owner.name.orig
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>nameColumn</name>
                <display>
                    <label>Access</label>
                </display>
                <previousColumn>user</previousColumn>
                <export>
                    <expression>
                        <script>
                            <objectVariableMode>prismReference</objectVariableMode>
                            <code>
                                return input?.object?.name
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>allPath</name>
                <display>
                    <label>Path</label>
                </display>
                <previousColumn>nameColumn</previousColumn>
                <!-- TODO: currently only one path is shown -->
                <export>
                    <expression>
                        <script>
                            <objectVariableMode>prismReference</objectVariableMode>
                            <code>
                                //com.evolveum.midpoint.util.DebugUtil.dump(assignmentPaths)
                                if (!data.assignmentPath) {
                                    return '?'
                                }

                                def segments = data.assignmentPath.segment

                                var rolePaths = []
                                for (int i = 0; i &lt; segments.size(); i++) {
                                    rolePaths.add(midpoint.resolveReferenceIfExists(segments[i].targetRef)?.
                                            name?.orig)
                                }
                                return rolePaths.join(' -&gt; ')
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <!-- This is probably not important column, everything is in the path column anyway. -->
                <name>parent</name>
                <display>
                    <label>Parent</label>
                </display>
                <previousColumn>allPath</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>
                                if (!data.assignmentPath) {
                                    return "?"
                                }

                                def segments = data.assignmentPath.segment
                                def segLen = segments.size()
                                if (segLen == 1) {
                                    return 'Direct'
                                } else {
                                    return midpoint.resolveReferenceIfExists(segments[segLen - 2].targetRef)?.name?.orig
                                }
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <!-- We don't store refs/metadata for disabled assignments, so this is always Enabled. -->
                <name>activation</name>
                <display>
                    <label>Activation</label>
                </display>
                <previousColumn>parent</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>data.assignment?.activation?.effectiveStatus</code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>validTo</name>
                <display>
                    <label>Valid to</label>
                </display>
                <previousColumn>activation</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>data.assignment?.activation?.validTo</code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>since</name>
                <display>
                    <label>Since</label>
                </display>
                <previousColumn>validTo</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>data.createTimestamp</code>
                        </script>
                    </expression>
                </export>
            </column>
        </view>
    </objectCollection>
</report>
