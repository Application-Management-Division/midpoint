<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2010-2023 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->
<report xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
        xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
        xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
        oid="7f1695f2-d826-4d78-a046-b8249b79d2b5">
    <name>Indirect assignment report</name>
    <description>Shows information stored in roleMembershipRef value metadata.</description>
    <!--
    Serious test would have this archetype, but it's not available for test.
    <assignment>
        <targetRef oid="00000000-0000-0000-0000-000000000171" type="ArchetypeType"/>
    </assignment>
    -->
    <objectCollection>
        <collection>
            <!-- Type is declared in the view element. -->
            <filter>
                <q:text>
                    . ownedBy (@type = UserType and @path = roleMembershipRef)
                </q:text>
            </filter>
        </collection>
        <subreport>
            <!--
            This subreport generates additional lines per each metadata value,
            in case there are multiple distinct assignment paths.
            -->
            <name>data</name>
            <order>1</order>
            <asRow>true</asRow>
            <expression>
                <script>
                    <objectVariableMode>prismReference</objectVariableMode>
                    <code>


                        import com.evolveum.midpoint.prism.PrismValueUtil
                        import com.evolveum.midpoint.schema.GetOperationOptions
                        import com.evolveum.midpoint.schema.SelectorOptions
                        import com.evolveum.midpoint.schema.result.OperationResult
                        import com.evolveum.midpoint.util.exception.ObjectNotFoundException
                        import com.evolveum.midpoint.xml.ns._public.common.common_3.ObjectReferenceType
                        import com.evolveum.midpoint.xml.ns._public.common.common_3.ObjectType

                        // object is Referencable (can be ObjectReferenceType, but also DefaultReferencableImpl).
                        def prismRefValue = object?.asReferenceValue()
                        // If parent is available, it's better to use it, we'll save resolutions in the collect loop.
                        def parentObject = PrismValueUtil.getParentObject(prismRefValue)?.realValue

                        return prismRefValue?.valueMetadata?.realValues?.findAll {
                            m -> m.provenance.assignmentPath != null
                        }?.collect { m ->
                            def assignmentPath = m.provenance.assignmentPath
                            def directAssignmentId = assignmentPath.segment[0].assignmentId
                            def ownerRef = m.provenance.assignmentPath.sourceRef
//                            def owner = parentObject ?: midpoint.resolveReferenceIfExists(ownerRef) // uses model and is very slow in 4.7
                            def owner = parentObject ?: resolveWithRepo(ownerRef) // with parent, no resolution is used here
                            def directAssignment = null
                            if (owner != null) {
                                for (def assignment : owner.assignment) {
                                    if (assignment?.id == directAssignmentId) {
                                        directAssignment = assignment
                                        break
                                    }
                                }
                            }
                            def segmentTargets = assignmentPath.segment
//                                    .collect(s -> midpoint.resolveReferenceIfExists(s?.targetRef)) // slow
                                    .collect(s -> resolveWithRepo(s?.targetRef))

                            // we'll return object/hashmap for each assignment path metadata value
                            return [
                                    assignmentPath: m.provenance.assignmentPath,
                                    segmentTargets: segmentTargets,
                                    createTimestamp: m.storage?.createTimestamp,
                                    owner: owner,
                                    targetName: prismRefValue?.object?.name?.orig,
                                    assignment: directAssignment
                            ]
                        }

                        private ObjectType resolveWithRepo(ObjectReferenceType ref) {
                            try {
                                var typeDef = prismContext.schemaRegistry.findObjectDefinitionByType(ref.type)
                                // We're creating ignored operation result as we don't want to contaminate the master
                                // result with false errors (partial or not). Not found is perfectly fine here.
                                return midpoint.repositoryService
                                        .getObject(typeDef.compileTimeClass, ref.oid,
                                                SelectorOptions.createCollection(GetOperationOptions.createAllowNotFound()),
                                                new OperationResult('ignored'))
                                        .asObjectable()
                            } catch (ObjectNotFoundException ignored) {
                                return null
                            }
                        }
                    </code>
                </script>
            </expression>
        </subreport>
        <view>
            <type>c:ObjectReferenceType</type>
            <paging>
                <q:orderBy>../name</q:orderBy>
            </paging>
            <column>
                <name>user</name>
                <display>
                    <label>User</label>
                </display>
                <export>
                    <expression>
                        <script>
                            <objectVariableMode>prismReference</objectVariableMode>
                            <code>
                                return data?.owner?.name?.orig ?: 'Unknown owner'
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>nameColumn</name>
                <display>
                    <label>Access</label>
                </display>
                <previousColumn>user</previousColumn>
                <export>
                    <expression>
                        <script>
                            <objectVariableMode>prismReference</objectVariableMode>
                            <code>
                                return data?.targetName
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>allPath</name>
                <display>
                    <label>Path</label>
                </display>
                <previousColumn>nameColumn</previousColumn>
                <export>
                    <expression>
                        <script>
                            <objectVariableMode>prismReference</objectVariableMode>
                            <code>
                                return data?.segmentTargets?.collect(o -> o?.name?.orig)?.join(' -> ') ?: '?'
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <!-- This is probably not important column, everything is in the path column anyway. -->
                <name>parent</name>
                <display>
                    <label>Parent</label>
                </display>
                <previousColumn>allPath</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>
                                if (!data?.segmentTargets) {
                                    return "?"
                                }

                                def segLen = data.segmentTargets.size()
                                if (segLen == 1) {
                                    return 'Direct'
                                } else {
                                    return data.segmentTargets[segLen - 2]?.name?.orig
                                }
                            </code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <!-- We don't store refs/metadata for disabled assignments, so this is always Enabled. -->
                <name>activation</name>
                <display>
                    <label>Activation</label>
                </display>
                <previousColumn>parent</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>data?.assignment?.activation?.effectiveStatus</code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>validTo</name>
                <display>
                    <label>Valid to</label>
                </display>
                <previousColumn>activation</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>data?.assignment?.activation?.validTo</code>
                        </script>
                    </expression>
                </export>
            </column>
            <column>
                <name>since</name>
                <display>
                    <label>Since</label>
                </display>
                <previousColumn>validTo</previousColumn>
                <export>
                    <expression>
                        <script>
                            <code>data?.createTimestamp</code>
                        </script>
                    </expression>
                </export>
            </column>
        </view>
    </objectCollection>
</report>
