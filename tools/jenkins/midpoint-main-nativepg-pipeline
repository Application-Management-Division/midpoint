def verbose = 0
try {
    verbose = Integer.parseInt(params.VERBOSE ?: '0')
} catch (Exception e) { /* ignored */ }

podTemplate(
        activeDeadlineSeconds: 21600, // 6h total build limit
        idleMinutes: 10,
        // No need for secret volume, no mvn deploy done here.
        workspaceVolume: dynamicPVC(requestsSize: "20Gi"),
        containers: [
                containerTemplate(name: 'jnlp',
                        image: 'jenkins/inbound-agent:4.10-3-alpine',
                        runAsUser: '0',
                        resourceLimitCpu: '900m',
                        resourceLimitMemory: '1Gi',
                        resourceRequestCpu: '900m',
                        resourceRequestMemory: '1Gi'),
                containerTemplate(name: 'postgres',
                        image: "${params.POSTGRES_IMAGE ?: 'postgres:14-alpine'}",
                        ttyEnabled: true,
                        resourceRequestCpu: '100m',
                        resourceLimitCpu: '1',
                        resourceRequestMemory: '1Gi',
                        resourceLimitMemory: '4Gi',
                        envVars: [
                            envVar(key: 'POSTGRES_INITDB_ARGS', value: '--lc-collate=en_US.utf8 --lc-ctype=en_US.utf8'),
                            envVar(key: 'POSTGRES_USER', value: 'midtest'),
                            envVar(key: 'POSTGRES_PASSWORD', value: 'password'),
                            // TODO is separate mount for data necessary?
                        ],
                        ports: [portMapping(name: 'postgres', containerPort: 5432)]),
                containerTemplate(name: 'maven',
                        image: "${params.BUILDER_IMAGE ?: 'maven:3.8.5-openjdk-17-slim'}",
                        ttyEnabled: true,
                        command: 'cat',
                        resourceLimitCpu: '4',
                        resourceLimitMemory: '8Gi') // see also -Xmx flag lower
        ]
) {
    node(POD_LABEL) {
        stage("checkout") {
            git branch: "${params.BRANCH ?: 'master'}",
                    url: 'https://github.com/Evolveum/midpoint.git'
        }
        stage("db-init") {
            container('postgres') {
                sh """#!/bin/bash
                    set -x
                    psql --version
                    psql -v ON_ERROR_STOP=1 -q -U midtest -f config/sql/native-new/postgres-new.sql \
                        -f config/sql/native-new/postgres-new-audit.sql -f config/sql/native-new/postgres-new-quartz.sql
                    #psql -U midtest -c "\\dt" # uncomment to list the tables
                """
            }
        }
        stage("build-with-tests") {
            container('maven') {
                sh """#!/bin/bash
                    if [ "${verbose}" -ge 1 ]
                    then
                        env | sort
                        mvn --version
                        df -h
		            fi

			        mvn -B -ntp -Dmaven.test.failure.ignore -P sqale,dbtest,-dist clean install \
			            -Dmidpoint.repository.jdbcUrl=jdbc:postgresql://localhost:5432/midtest

                    if [ "${verbose}" -ge 1 ]
                    then
                        df -h
                    fi
                """
            }
        }
        stage("tests-extra") {
            container('maven') {
                // -Xmx6g should fit into 8GB of RAM, 4g is on the edge for some tests
                sh """#!/bin/bash
                    if [ "${verbose}" -ge 1 ]
                    then
                        df -h
		            fi

			        mvn -B -ntp -Dmaven.test.failure.ignore -P sqale,extratest,dbtest,-dist verify -rf testing \
			            -Dmidpoint.repository.jdbcUrl=jdbc:postgresql://localhost:5432/midtest \
			            -Dtest.config.file=test-config-new-repo.xml \
			            -Dfailsafe.args="-Xms2g -Xmx6g -Duser.language=en --add-exports java.management/sun.management=ALL-UNNAMED"

                    if [ "${verbose}" -ge 1 ]
                    then
                        df -h
                    fi
                """
        }
        stage("collect-test-results") {
            container('maven') {
                step([
                    $class: 'Publisher',
//                        $class: 'LabeledTestResultGroupPublisher',
                    reportFilenamePattern: '**/testng-results.xml'
                ])
            }
        }
    }
}
